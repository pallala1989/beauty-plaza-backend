package com.beautyplaza.controller;

import com.beautyplaza.dto.BeautyServiceDTO;
import com.beautyplaza.exception.ResourceNotFoundException;
import com.beautyplaza.service.BeautyServiceService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/services")
public class BeautyServiceController {

    private final BeautyServiceService beautyServiceService;

    @Autowired
    public BeautyServiceController(BeautyServiceService beautyServiceService) {
        this.beautyServiceService = beautyServiceService;
    }

    /**
     * Get all active beauty services.
     * Accessible by anyone.
     * @return List of BeautyServiceDTOs
     */
    @GetMapping
    public ResponseEntity<List<BeautyServiceDTO>> getAllActiveBeautyServices() {
        List<BeautyServiceDTO> services = beautyServiceService.getAllActiveBeautyServices();
        return ResponseEntity.ok(services);
    }

    /**
     * Get a specific beauty service by ID.
     * Accessible by anyone.
     * @param id The ID of the beauty service
     * @return BeautyServiceDTO if found
     * @throws ResourceNotFoundException if service not found
     */
    @GetMapping("/{id}")
    public ResponseEntity<BeautyServiceDTO> getBeautyServiceById(@PathVariable Long id) {
        // This line is correct as the service layer handles the Optional and throws if not found.
        BeautyServiceDTO service = beautyServiceService.getBeautyServiceById(id);
        return ResponseEntity.ok(service);
    }

    /**
     * Admin endpoint: Get all beauty services (including inactive ones).
     * Requires ADMIN role.
     * @return List of BeautyServiceDTOs
     */
    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/admin/all")
    public ResponseEntity<List<BeautyServiceDTO>> getAllBeautyServicesForAdmin() {
        List<BeautyServiceDTO> services = beautyServiceService.getAllBeautyServices();
        return ResponseEntity.ok(services);
    }

    /**
     * Admin endpoint: Create a new beauty service.
     * Requires ADMIN role.
     * @param beautyServiceDTO The DTO containing service details
     * @return The created BeautyServiceDTO
     */
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/admin")
    public ResponseEntity<BeautyServiceDTO> createBeautyService(@Valid @RequestBody BeautyServiceDTO beautyServiceDTO) {
        // ID should be null for creation, will be generated by DB
        beautyServiceDTO.setId(null);
        BeautyServiceDTO createdService = beautyServiceService.createBeautyService(beautyServiceDTO);
        return new ResponseEntity<>(createdService, HttpStatus.CREATED);
    }

    /**
     * Admin endpoint: Update an existing beauty service.
     * Requires ADMIN role.
     * @param id The ID of the service to update
     * @param beautyServiceDTO The DTO containing updated service details
     * @return The updated BeautyServiceDTO
     * @throws ResourceNotFoundException if service not found
     */
    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/admin/{id}")
    public ResponseEntity<BeautyServiceDTO> updateBeautyService(@PathVariable Long id, @Valid @RequestBody BeautyServiceDTO beautyServiceDTO) {
        BeautyServiceDTO updatedService = beautyServiceService.updateBeautyService(id, beautyServiceDTO);
        return ResponseEntity.ok(updatedService);
    }

    /**
     * Admin endpoint: Delete (deactivate) a beauty service.
     * This method marks the service as inactive rather than deleting it from the database.
     * Requires ADMIN role.
     * @param id The ID of the service to delete/deactivate
     * @return No content
     * @throws ResourceNotFoundException if service not found
     */
    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/admin/{id}")
    public ResponseEntity<Void> deleteBeautyService(@PathVariable Long id) {
        beautyServiceService.deleteBeautyService(id); // This will deactivate it
        return ResponseEntity.noContent().build();
    }
}